#!/usr/bin/env bash
#
#  kvmsh
#
#  Command-line tool for manipulating virtual machines wrapping the use
#  of kvm tools 'virsh', 'virt-install', and 'virt-clone'.
#
#  Timothy C. Arland <tcarland@gmail.com, tarland@trace3.com>
#
PNAME=${0##*\/}
AUTHOR="tcarland@gmail.com"
VERSION="v21.05"

# ------------------------------------
# defaults
ubuntu="ubuntu20.04"  # default os-var
focal="ubuntu-20.04.1-legacy-server-amd64.iso"  # default image
# alternate web installer
#focal="http://us.archive.ubuntu.com/ubuntu/dists/focal/main/installer-amd64/"

pool="default"
network="bridge=br0"  # bridge=virbr0 is the KVM default local NAT interface
ostype="linux"
osvar=
image=

memory="1024,maxmemory=2048"
vcpus="1"
graphics="vnc"
use_console=1
format="raw"  # or qcow2
bootsz="40G"
disksz="100G"
mindisksz=5
disknum=0
dryrun=1
cdrom=1
uefi=0

virt_uri="qemu:///system"
virsh="virsh --connect $virt_uri"
vnc="vnc,listen=0.0.0.0"
serial="console=ttyS0,115200n8"
mac=

# map pool name to storage target
declare -A poolmap

if [ -n "$KVMSH_DEFAULT_IMAGE" ]; then 
    image="$KVMSH_DEFAULT_IMAGE"
fi

# ------------------------------------

usage="
A command-line tool for manipulating KVM based virtual machines 
wrapping the use of kvm tools 'virsh', 'virt-install', and 'virt-clone'.

This is intended for automation and scripting of kvm management with 
some sane defaults for simplifying usage.

The parameters all mirror 'virsh' closely and most virsh options are 
either overloaded or passed through directly to virsh allowing 'kvmsh' 
to be used in place of 'virsh'.

Synopsis:
  $PNAME [options] <action> <name> 

Options:
  -b|--bootsize <xxG>     : Size of boot disk in Gb. Default is '$bootsz'. 
  -C|--console            : Use serial console, sets 'none' for --graphics 
  -c|--cpus     <n>       : Number of vcpus to allocate. 
  -D|--disknum  <n>       : Number of disks to be attached.
  -d|--disksize <xxG>     : Size of disk(s) to be attached with unit, eg. '100G'
  -f|--format   <type>    : VM disk type: 'qcow2|raw', Default is '$format'.
  -G|--graphics <type>    : KVM Graphics type; Default is 'VNC', unless -C is set.
  -h|--help               : Show usage info and exit. 
  -i|--image    <name>    : Name of image, relative to storage pool, or a location.
  -I|--iso|--cdrom        : Treat image as a boot iso, ie. --cdrom to virt-install.
  -n|--dryrun             : Enable DRYRUN, Nothing is executed.
  -N|--network  <if>      : KVM Network, default is '$network'.
  -m|--memory   <Mib>     : Memory allocation in Mb and optionally max memory.
                            eg. '--memory 1024' or '--memory $memory' 
  -o|--os   <os-variant>  : Set virsh 'os-variant' for create. Default=$ubuntu 
  -p|--pool    <name>     : Storage pool to use, if not '$pool'.
  -u|--uri     <uri>      : Set the KVM connect uri. Default is '$virt_uri'.
  -U|--no-uefi            : Disable UEFI boot support, enabled by default.
  -V|--version            : Show version info and exit. 

   <action>               : VM operation to perform, see below. 
   <name>                 : Name of VM on which to operate the action. 

Actions: 
  create|delete  <name>  : Create or delete a VM (will not delete volumes).
  start|stop     <name>  : Start or stop a VM. 
  create-pool <dir> <n>  : Creates a storage pool named <n> for a given dir.
  start-pool     <name>  : Activate an offline storage pool by name.
  stop-pool      <name>  : Stop or deactivate a storage pool by name.
  delete-pool    <name>  : Removes a pool definition (will not delete dir).
  attach-disk    <name>  : Attach volumes to a vm (use -D and -d options).
  delete-vol     <name>  : Delete a volume (will delete the disk image).
  clone <srcvm> <destvm> : Clones vm (set --pool to move storage pools).
  setmem    <xb> <name>  : Set a new memory value. Default unit is Kib.
  setmaxmem <xb> <name>  : Set a max memory value. eg. 'setmaxmem 32G myvm'.
  setvcpus   <n> <name>  : Set the number of vcpus for an existing VM.
  status         <name>  : Provides status via shell return code.
                           0=running, 1=stopped, 2=not found
  pool-list              : List available pools.
  pool-autostart <pool>  : Set 'autostart' for pool.
  vol-list  <pool>       : List volumes in pool.
  list                   : List all virtual machines.
  mac-addr  <name>       : Print HW MacAddress for the given VM.
"

version="$PNAME $VERSION"

# ------------------------------------

list_vms()
{
    ( $virsh list --all )
}


list_vols()
{
    local poolname="${1:-default}"
    ( $virsh vol-list --pool $poolname )
}


list_all_pools()
{
    ( $virsh pool-list --all --details )
}


vm_is_running()
{
    local vm="$1"
    state=$( $virsh list | grep $vm | awk '{ print $3 }' )
    if [ "$state" == "running" ]; then
        return 0
    elif [ -z "$state" ]; then
        return 2
    fi
    return 1
}


pool_is_active()
{
    local vm="$1"
    local rt=1

    state=$( $virsh pool-list --all | grep $vm | awk '{ print $2 }' )

    if [ "$state" == "active" ]; then
        rt=0
    fi

    return $rt
}


create_disk()
{
    local img="$1"
    local sz="$2"
    local type="$3"

    if [ $dryrun -gt 0 ]; then
        ( qemu-img create -f $type $img ${sz} )
    else
        echo "( qemu-img create -f $type $img ${sz} )"
    fi

    return $?
}


get_macaddr()
{
    local target="$1"

    xml=$( $virsh dumpxml $target 2>/dev/null )
    mac=$( echo "$xml" | xmllint --xpath 'string(//interface/mac/@address)' - 2>/dev/null )

    echo "$mac"

    return 0
}


get_pools()
{
    local -n pary="$1"
    local pooldir=""
    local rt=0

    names=$( $virsh pool-list --all --name 2>/dev/null )

    for p in $names; do
        if [ -n "$p" ]; then
            pary["$p"]=""
        fi
    done

    if [ ${#pary[@]} -eq 0 ]; then
        return 1
    fi

    for p in ${!pary[@]}; do
        pooldir=$( $virsh pool-dumpxml $p 2>/dev/null | \
          grep -A5 target | \
          grep path | \
          sed -E 's/.*<path>(.*)<\/path>/\1/' )
        if [ -d $pooldir ]; then
            pary[$p]="$pooldir"
        fi
    done

    return $rt
}


get_num_drives()
{
    local vmname="$1"

    devs=$( $virsh dumpxml $vmname | \
      grep -A5 "<disk type='file' device='disk'>" | \
      grep "<target dev=" | \
      sed -E "s/^.*<target dev='(.*)' bus.*/\1/" | \
      sed -E 's/vd(.)/\1/' )

    return ${#devs}
}

# ------------------------------------------------

action=
name=
rt=0
chars=( {b..z} )
nums=( {1..25} )
maxvols=${#chars[@]}


while [ $# -gt 0 ]; do
    case "$1" in
        'help'|-h|--help)
            echo "$usage"
            exit 0
            ;;
        -c|--cpus)
            vcpus="$2"
            shift
            ;;
        -C|--console)
            use_console=0
            ;;
        -f|--disk-format|--format)
            format="$2"
            shift
            if [[ "$format" == "qcow2" || "$format" == "raw" ]]; then
                echo "$PNAME set disk typed as '$format'"
            else
                echo "$PNAME error, invalid format type '$format'"
                exit 1
            fi
            ;;
        -G|--graphics)
            graphics="$2"
            shift
            ;;
        -i|--image)
            image="$2"
            shift
            ;;
        -I|--iso|--cdrom)
            cdrom=0
            ;;
        -l|--list)
            action="list"
            ;;
        -m|--memory)
            memory="$2"
            shift
            ;;
        -N|--network)
            network="$2"
            shift
            ;;
        -n|--dryrun)
            echo " <DRYRUN> enabled"
            dryrun=0
            ;;
        -b|--bootsize)
            bootsz="$2"
            shift
            ;;
        -d|--disksize)
            disksz="$2"
            val=${disksz%%[!0-9]*}
            if (( $val < $mindisksz )); then
                echo "$PNAME error: disk size is less than minimum $mindisksz G" >&2
                exit 1
            fi
            shift
            ;;
        -D|--disknum)
            disknum="$2"
            shift
            ;;
        -o|--os|--osvar*)
            osvar="$2"
            shift
            ;;
        -p|--pool)
            pool="$2"
            shift
            ;;
        -u|--uri)
            virt_uri="$2"
            shift
            ;;
        -U|--no-uefi|nouefi|no-efi|noefi)
            uefi=1
            ;;
        'version'|-V|--version)
            echo "$version"
            exit 0
            ;;
        *)
            action="${1,,}"
            shift
            name="$1"
            shift
            args="$@"
            shift $#
            ;;
    esac
    shift
done

if [ $use_console -eq 0 ]; then
    graphics="none"
fi

get_pools poolmap

case "$action" in
# --- ATTACH DRIVES
attach*)
    target="${poolmap[$pool]}"
    live="--config"

    if [ -z "$target" ]; then
        echo "$PNAME error determining pool storage directory: '$pool'" >&2
        exit 1
    fi
    if [ -z "$name" ]; then
        echo "$PNAME error, no VM defined."
        exit 1
    fi

    get_num_drives $name

    rt=$?
    if [ $rt -gt 1 ]; then
        echo "$PNAME only supports attaching volumes to VM's with a single drive" >&2
        exit 1
    fi

    if vm_is_running $name; then
        live="--live"
    fi

    for (( i=0; i<$disknum; )); do
        dev="vd${chars[i++]}"
        img="$target/${name}-$dev.img"

        create_disk $img $disksz $format

        rt=$?
        if [ $rt -ne 0 ]; then
            echo "$PNAME error in create_disk() '$img'" >&2
            break
        fi

        if [ $dryrun -ne 0 ]; then
            ( $virsh attach-disk $name $img $dev --targetbus virtio $live )

            rt=$?
            if [ $rt -ne 0 ]; then
                echo "$PNAME error in attach-disk" >&2
                break
            fi
        else
            echo "( $virsh attach-disk $name $img $dev --targetbus virtio $live )"
        fi
    done
    ;;

# --- CREATE VMS
create)
    target="${poolmap[$pool]}"

    if [ -z "$target" ]; then
        echo "$PNAME error determining pool storage directory for '$pool'" >&2
        exit 1
    fi

    if [ -z "$name" ]; then
        echo "$PNAME error no vm name defined." >&2
        exit 1
    fi

    if [ -z "$image" ]; then
        image="$focal"
        osvar="$ubuntu"
    elif [ -z "$osvar" ]; then
        echo "$PNAME error: image provided but not os-variant, --osvar is required."
        echo "  The tool 'osinfo-query os' will list os-variants."
        exit 1
    fi

    if [[ $image =~ ^http ]]; then
        srcimg="$image"
    else
        srcimg="$target/$image"
    fi

    disk="$name-vda.img"
    diskimg="${target}/$disk"

    create_disk $diskimg $bootsz $format

    rt=$?
    if [ $rt -ne 0 ]; then
        echo "$PNAME error in create_disk()" >&2
        exit $rt
    fi

    cmdargs=(--name "$name" \
      --memory $memory \
      --vcpus $vcpus \
      --os-type "$ostype" \
      --os-variant "$osvar" \
      --disk "path=$diskimg" \
      --network "$network")

    if [ $uefi -eq 0 ]; then
        cmdargs+=(--boot "uefi")
    fi
    if [ $cdrom -eq 0 ]; then
        cmdargs+=(--cdrom "$srcimg")
    else
        cmdargs+=(--location "$srcimg")
    fi

    if [ $use_console -eq 0 ]; then
        cmdargs+=(--graphics "none")
        if [ $cdrom -eq 0 ]; then
            echo "Warning, cannot set --extra-args with --cdrom"
        else
            cmdargs+=(--extra-args="$serial")
        fi
    else
        if [ "${graphics,,}" == "vnc" ]; then
            cmdargs+=(--graphics "$vnc" --noautoconsole)
        fi
    fi
    
    if [ $dryrun -gt 0 ]; then
        ( virt-install --connect $virt_uri ${cmdargs[@]} )
        rt=$?
    else
        echo "( virt-install --connect $virt_uri ${cmdargs[@]} )"
    fi

    if [ $rt -eq 0 ]; then
        get_macaddr $name
    fi
    ;;

# --- CLONE VM
clone)
    path="${poolmap[$pool]}"
    target="$args"
    file="$path/$target-vda.img"

    if [ -z "$path" ]; then
        echo "$PNAME error determining storage path" >&2
        exit 1
    fi

    if [ -z "$name" ] || [ -z "$target" ]; then
        echo "$PNAME error: no targets provided."
        echo "$usage"
        exit 1
    fi

    if [ $dryrun -gt 0 ]; then
        ( virt-clone --connect $virt_uri --original $name --name $target --file $file )
        rt=$?
    else
        echo "( virt-clone --connect $virt_uri --original $name --name $target --file $file )"
    fi

    if [ $rt -eq 0 ]; then
        get_macaddr $target
    fi
    ;;

# --- MAC-ADDRESS
get-mac*|mac-addr*)
    if [ -z "$name" ]; then
        echo "$PNAME error: no target provided."
        echo "$usage"
        exit 1
    fi

    get_macaddr $name
    rt=$?
    ;;

# --- STATUS
status)
    if [ -z "$name" ]; then
        exit 2
    fi

    vm_is_running $name
    rt=$?
    ;;

# --- PASSTHROUGH OPERATIONS to virsh
start|suspend|restore|save|reset|resume|reboot|console|pool-info|info|dumpxml|define|dom*|checkpoint-*|net*|iface-*|nwfilter-*)
    if [ $dryrun -gt 0 ]; then
        ( $virsh $action $name $args )
        rt=$?
    else
        echo "( $virsh $action $name $args )"
    fi
    ;;

# --- SET MEMORY
setmem|setmaxmem)
    if [ -z "$name" ] || [ -z "$args" ]; then
        echo "$PNAME error in arguments"
        exit 1
    fi
    # flip args
    mem="$name"
    name="$args"
    live="--config"

    if vm_is_running $name; then
        if [[ $action =~ ^setmaxmem.*$ ]]; then
            echo "$PNAME error: VM must off or suspended to change Max Memory" >&2
            exit 1
        fi
        live="--live"
    fi

    if [ $dryrun -gt 0 ]; then
        ( $virsh $action $name $mem $live )
        rt=$?
    else
        echo "( $virsh $action $name $mem $live )"
    fi
    ;;

# --- SET VCPUS
setvcpu*)
    if [ -z "$name" ] || [ -z "$args" ]; then
        echo "$PNAME error with setvcpus arguments"
        exit 1
    fi
    # flip args
    cnt="$name"
    name="$args"
    live="--config"

    if vm_is_running $name; then
        live="--live"
    fi

    if [ $dryrun -gt 0 ]; then
        ( $virsh setvcpus $name $cnt --maximum $live )
        ( $virsh setvcpus $name $cnt $live )
        rt=$?
    else
        echo "( $virsh setvcpus $name $cnt $live )"
    fi
    ;;

# --- STOP VMS
stop|shutdown|destroy)
    if [ -z "$name" ]; then
        echo "$PNAME error: no <name> provided."
        exit 1
    fi

    if vm_is_running $name; then
        echo "$PNAME stopping '$name'.."
        if [ $dryrun -gt 0 ]; then
            ( $virsh destroy $name )
            rt=$?
        fi
    else
        echo "$PNAME error, vm does not appear to be running.."
        rt=1
    fi
    ;;

# --- DELETE VMS
delete|undefine)
    if [ -z "$name" ]; then
        echo "$PNAME error: no <name> provided."
        exit 1
    fi

    if vm_is_running $name; then
        echo "$PNAME stopping '$name'.."
        if [ $dryrun -gt 0 ]; then
            ( $virsh destroy $name )
            rt=$?
        fi
    fi

    if [ $dryrun -gt 0 ]; then
        ( $virsh undefine --nvram $name )
        rt=$?
    fi
    ;;

# --- DELETE VOLUMES
vol-delete|delete-vol)
    if [ $dryrun -gt 0 ]; then
        ( $virsh vol-delete $name --pool $pool )
        rt=$?
    else
        echo "( $virsh vol-delete $name --pool $pool )"
    fi
    ;;

# --- CREATE STORAGE POOL
pool-create|create-pool)
    if [ -z "$name" ]; then
        echo "$PNAME error, directory name not provided."
        exit 1
    fi

    pool="default"

    if [ ${#args} -gt 0 ]; then
        pool="${args[0]}"
    fi

    if [ $dryrun -gt 0 ]; then
        ( $virsh pool-define-as $pool dir - - - - "$name" )

        rt=$?
        if [ $rt -gt 0 ]; then
            echo "$PNAME Error in pool-define"
            exit $rt
        fi
        echo " -> Pool '$pool' defined."

        ( $virsh pool-build $pool )

        rt=$?
        if [ $rt -gt 0 ]; then
            echo "$PNAME Error building pool"
            exit $rt
        fi
        echo " -> Pool '$pool' built successfully."

        ( $virsh pool-start $pool )

        rt=$?
        if [ $rt -gt 0 ]; then
            echo "$PNAME Error starting pool"
            exit $rt
        fi
        echo " -> Pool '$pool' started successfully."
    else
        echo "( $virsh pool-define-as $pool dir - - - - '$name' )"
        echo "( $virsh pool-build $pool )"
        echo "( $virsh pool-start $pool )"
    fi
    ;;

# --- SET POOL AUTOSTART
pool-autostart)
    if [ -z "$name" ]; then
        echo "$PNAME error, directory name not provided."
        exit 1
    fi

    if [ $dryrun -gt 0 ]; then
        ( $virsh pool-autostart $name )
    else
        echo "( $virsh pool-autostart $name )"
    fi
    ;;

# --- START POOLS
pool-start|start-pool)
    if [ -n "$name" ]; then 
        pool="$name"
    fi

    if pool_is_active $pool; then
        echo " -> Storage pool '$pool' already started.."
        rt=0
    else
        echo "$PNAME starting storage pool '$pool'.."
        if [ $dryrun -gt 0 ]; then
            ( $virsh pool-start $pool )
            rt=$?
        fi
    fi
    ;;

# --- STOP POOLS
pool-stop|stop-pool)
    if [ -n "$name" ]; then
        pool="$name"
    fi

    if pool_is_active $pool; then
        echo "$PNAME stopping storage pool '$pool'"
        if [ $dryrun -gt 0 ]; then
            ( $virsh pool-destroy $pool )
            rt=$?
        fi
    fi
    ;;

# --- DELETE POOLS
# this delete avoids pool-delete destructiveness by only undefining
pool-delete|delete-pool)
    if [ -n "$name" ]; then
        pool="$name"
    fi

    if pool_is_active $pool; then
        echo "$PNAME stopping storage pool '$pool'.."
        if [ $dryrun -gt 0 ]; then
            ( $virsh pool-destroy $pool )
        fi
    fi

    if [ $dryrun -gt 0 ]; then
        echo "$PNAME deleting storage pool '$pool'.."
        ( $virsh pool-undefine $pool )
        rt=$?
    fi
    ;;

# -- LIST POOLS
pool-list|list-pool*)
    if [ ${#poolmap[@]} -eq 0 ]; then
        echo "$PNAME no pools found or defined.."
        exit 0
    fi

    printf " %15s    %30s    %10s\n" "  Pool Name  " "  Target Path   " " State"
    printf " %15s    %30s    %10s\n" " ---------------- " "--------------------- " "----------"

    for pool in ${!poolmap[@]}; do
        state="inactive"

        if pool_is_active $pool; then
            state="active"
        fi

        printf " %15s    %30s    %10s\n" "$pool" "${poolmap[$pool]}" "$state"
    done
    ;;

# -- LIST VMS
list-vm*|list)
    list_vms
    ;;

# --- LIST VOLUMES
vol-list|list-vol*)
    if [ -n "$name" ]; then
        pool="$name"
    fi

    list_vols $pool
    ;;

*)
    echo "$PNAME action missing or not recognized."
    echo "$usage"
    ;;
esac

exit $rt
